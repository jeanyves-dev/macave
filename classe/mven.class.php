<?phpclass mven{	private $_remven;	private $_damven;	private $_damve2;	private $_refour;	private $_nomven;	private $_canapp;public function __construct(array $donnees){	$this->hydrate($donnees);}public function hydrate(array $donnees){	foreach ($donnees as $key => $value)	{		$method = "set".ucfirst($key);		if (method_exists($this, $method))		{			$this->$method($value);		}	}}public function remven(){return $this->_remven;}public function refour(){return $this->_refour;}public function nomven(){return $this->_nomven;}public function damve2(){return $this->_damven;}public function canapp(){return $this->_canapp;}public function damven(){	if ($this->_damven <> 0)	{		$date = new DateTime($this->_damven);		$date = $date->format('d.m.Y');	}	else	{	$date = "";}	return $date;}public function setremven($unremven){$this->_remven = $unremven;}public function setdamven($undamven){$this->_damven = $undamven;}public function setdamve2($undamve2){$this->_damven = $undamve2;}public function setrefour($unrefour){$this->_refour = $unrefour;}public function setnomven($unnomven){$this->_nomven = $unnomven;}public function setcanapp($uncanapp){$this->_canapp = $uncanapp;}public function Defour($db){	$four_dao = new four_dao($db);	$unfour   = $four_dao->get($this->_refour);	return $unfour->Defour();}public function Decanapp($db){	$tbsd_dao = new tbsd_dao($db);	$untbsd   = $tbsd_dao->get("canapp",$this->_canapp);	return $untbsd->Detbsd();}}?>